name: Release Build

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-ver.outputs.version }}
      sign: ${{ steps.check.outputs.sign }}
    steps:
      - id: set-ver
        run: |
          echo "version=$(date -d "8 hour" -u +%y.%m%d%H)" >> $GITHUB_OUTPUT
      - id: check
        run: |
          if [ ! -z "${{ secrets.RELEASE_KEY_STORE }}" ]; then
            echo "sign=yes" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.sign }}
    strategy:
      matrix:
        product: [ app ]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      product: ${{ matrix.product }}
      VERSION: ${{ needs.prepare.outputs.version }}
      sign: ${{ needs.prepare.outputs.sign }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Release Apk Sign
        run: |
          echo -e "\n" >> gradle.properties
          echo "RELEASE_KEY_ALIAS='${{ secrets.RELEASE_KEY_ALIAS }}'" >> gradle.properties
          echo "RELEASE_KEY_PASSWORD='${{ secrets.RELEASE_KEY_PASSWORD }}'" >> gradle.properties
          echo "RELEASE_STORE_PASSWORD='${{ secrets.RELEASE_STORE_PASSWORD }}'" >> gradle.properties
          echo "RELEASE_FILE='./key.jks'" >> gradle.properties
          echo ${{ secrets.RELEASE_KEY_STORE }} | base64 --decode > $GITHUB_WORKSPACE/app/key.js

      - name: Unify Version Name
        run: |
          echo "统一版本号"
          sed -i "/def version/c def version = \"${{ env.VERSION }}\"" ${{ github.workspace }}/app/build.gradle

      - name: Set up Gradle
        uses: gradle/gradle-setup-action@v4

      - name: Build With Gradle
        run: |
          echo "开始进行${{ env.product }}构建"
          chmod +x gradlew
          ./gradlew assemble${{ env.product }}Release --build-cache --parallel --daemon --warning-mode=all

      - name: Organize the Files
        run: |
          mkdir -p ${{ github.workspace }}/apk/
          cp -r ${{ github.workspace }}/app/build/outputs/apk/*/*.apk ${{ github.workspace }}/apk/

      - name: Upload App To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: legado_${{ env.product }}
          path: ${{ github.workspace }}/apk/*.apk

      - name: Release
        if: ${{ env.product == 'app' }}
        uses: softprops/action-gh-release@v1
        with:
          name: legado_app_${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          body_path: ${{ github.event.client_payload.CHANGELOG_PATH }}
          draft: false
          prerelease: false
          files: ${{ github.workspace }}/apk/legado_app_*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Assets To "release" Branch
        if: ${{ github.actor == 'gedoor' }}
        run: |
          cd ${{ GITHUB_WORKSPACE }}/apk
          git init
          git checkout -b release
          git config user.name "github-actions[bot]"
          git config user.email "48982812+github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://${{ secrets.GITHUB_ACTOR }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git add *.apk
          git commit -m "${{ env.VERSION }}" -f || true
          git push -f -u origin release

      - name: Purge Jsdelivr Cache
        if: ${{ github.actor == 'gedoor' }}
        run: |
          result=$(curl -s https://www.jsdelivr.com/api/purge?release=${GITHUB_REPOSITORY}@release)
          if echo $result | grep -q 'success.true'; then
              echo "jsdelivr缓存更新成功"
            else
              echo $result
              fi
